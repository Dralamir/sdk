<?xml version="1.0" encoding="utf-8"?>
<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:components="org.openzoom.flex.components.*"
    xmlns:controllers="org.openzoom.flash.viewport.controllers.*"
    xmlns:transformers="org.openzoom.flash.viewport.transformers.*"
    backgroundGradientColors="[ 0, 0 ]"
    layout="absolute"
    preinitialize="preinitializeHandler( event )"
    applicationComplete="applicationCompleteHandler( event )"
    >
    <mx:Style>
        global {
            theme-color: #FFCC00;
            font-family: Arial;
            font-size: 12;
        }
        Button {
            fill-alphas: 1, 1, 1, 1;
        }
    </mx:Style>

    <!-- Include settings such as Flickr API key -->
    <mx:Script source="settings.as"/>

    <mx:Script>
        <![CDATA[

            //------------------------------------------------------------------
            //
            //  Imports
            //
            //------------------------------------------------------------------
    
            import caurina.transitions.Tweener;
            
            import com.adobe.webapis.flickr.Photo;
            import com.adobe.webapis.flickr.PagedPhotoList;
            import com.adobe.webapis.flickr.FlickrService;
            import com.adobe.webapis.flickr.events.FlickrResultEvent;

            import mx.events.FlexEvent;

            import org.openzoom.flash.descriptors.IMultiScaleImageDescriptor;
            import org.openzoom.flash.descriptors.djatoka.DjatokaDescriptor;
            import org.openzoom.flash.renderers.MultiScaleImageRenderer;
            import org.openzoom.flash.utils.ExternalMouseWheel;

            //------------------------------------------------------------------
            //
            //  Constants
            //
            //------------------------------------------------------------------

            // From: http://www.flickr.com/services/api/flickr.people.getPublicPhotos.html
            private static const USER_ID : String = "72389028@N00"
            private static const EXTRAS : String = "o_dims, original_format"

            // From: http://www.flickr.com/services/api/misc.urls.html
//          private static const IMAGE_SIZE : Number = 240
//          private static const IMAGE_SUFFIX : String = "_m"
            private static const IMAGE_SIZE : Number = 500
            private static const IMAGE_SUFFIX : String = ""
//          private static const IMAGE_SIZE : Number = 1024
//          private static const IMAGE_SUFFIX : String = "_b"

            private static const NUM_PHOTOS : uint = 160

            //------------------------------------------------------------------
            //
            //  Variables
            //
            //------------------------------------------------------------------

            private var flickr : FlickrService

            //------------------------------------------------------------------
            //
            //  Event handlers
            //
            //------------------------------------------------------------------
        
            private function preinitializeHandler( event : FlexEvent ) : void
            {
            	Security.loadPolicyFile( "http://african.lanl.gov/crossdomain.xml" )
            }

            private function applicationCompleteHandler( event : FlexEvent ) : void
            {
                // Enable mouse wheel support on Mac OS
                ExternalMouseWheel.initialize( stage )

                flickr = new FlickrService( FLICKR_API_KEY )
                flickr.addEventListener( FlickrResultEvent.PEOPLE_GET_PUBLIC_PHOTOS,
                                          flickr_peopleGetPublicPhotosHandler,
                                          false, 0, true )
                flickr.people.getPublicPhotos( USER_ID, EXTRAS, NUM_PHOTOS )
            }

            private function flickr_peopleGetPublicPhotosHandler( event : FlickrResultEvent ) : void
            {
                if( !event.success )
                    return

                var photos : Array = PagedPhotoList( event.data.photos ).photos as Array

                for( var i : int = 0; i < photos.length; i++ )
                {
                    var photo : Photo = photos[ i ] as Photo

                    // Flickr photo URL:
                    // http://farm{farm-id}.static.flickr.com/{server-id}/{id}_{o-secret}_o.(jpg|gif|png)

                    // Original Size URL
//                    var url : String = [ "http://farm", photo.farmId,
//                                         ".static.flickr.com/", photo.server, "/",
//                                         photo.id, "_", photo.originalSecret, "_o.",
//                                         photo.originalFormat ].join("")

                    var url : String = [ "http://farm", photo.farmId,
                                         ".static.flickr.com/", photo.server, "/",
                                         photo.id, "_", photo.secret, IMAGE_SUFFIX, ".jpg"].join("")

                    if( isNaN( photo.originalWidth ) || isNaN( photo.originalHeight ))
                        continue

                    var aspectRatio : Number = photo.originalWidth / photo.originalHeight

                    var imageWidth : Number = photo.originalWidth
                    var imageHeight : Number = photo.originalHeight

                    if( aspectRatio > 1 )
                    {
                        imageWidth = IMAGE_SIZE
                        imageHeight = IMAGE_SIZE / aspectRatio
                    }
                    else
                    {
                        imageWidth = IMAGE_SIZE * aspectRatio
                        imageHeight = IMAGE_SIZE
                    }


                    var photoDescriptor : IMultiScaleImageDescriptor
                    
                    photoDescriptor = new DjatokaDescriptor( DJAKOTA_RESOLVER_URL,
                                                             url,
                                                             imageWidth,
                                                             imageHeight,
                                                             256,
                                                             1 )
                                                           
                    var renderer : MultiScaleImageRenderer =
                           new MultiScaleImageRenderer( photoDescriptor,
                                                        container.loader,
                                                        imageWidth, imageHeight )

                    var position : Point = new Point( container.sceneWidth - renderer.width,
                                                      container.sceneHeight - renderer.height )

                    renderer.x = position.x * Math.random()
                    renderer.y = position.y * Math.random()

                    container.addChild( renderer )
                }
            }

            private function shakeItButton_clickHandler( event : Event ) : void
            {
                for( var i : int = 0; i < container.numChildren; i++ )
                {
                    var child : DisplayObject = container.getChildAt( i )
                    var position : Point = new Point()

                    position.x = Math.random() * ( container.sceneWidth - child.width )
                    position.y = Math.random() * ( container.sceneHeight - child.height )

                    Tweener.addTween( child, { x: position.x,
                                               y: position.y,
                                               time: 0.5,
                                               transition: "easeOutQuad",
                                               delay: Math.random() * 0.1 } )
                }
            }
            
            private function circularLayoutButton_clickHandler( event : Event ) : void
            {
                for( var i : int = 0; i < container.numChildren; i++ )
                {
                    var child : DisplayObject = container.getChildAt( i )
                    var position : Point = new Point()

                    // Circular
                    var center : Point = new Point( container.sceneWidth / 2,
                                                    container.sceneHeight / 2 )
                    var distance : Number = ( 0.5 + Math.random() * 0.5 )
                                                * Math.min( container.sceneWidth - child.width,
                                                            container.sceneHeight - child.height )
                    var angle : Number = Math.random() * 2 * Math.PI
                    position.x = center.x + Math.cos( angle ) * distance / 3
                    position.y = center.y + Math.sin( angle ) * distance / 3

                    Tweener.addTween( child, { x: position.x,
                                               y: position.y,
                                               time: 0.5,
                                               transition: "easeOutQuad",
                                               delay: Math.random() * 0.1 } )
                }
            }

            private function gridColumnsButton_clickHandler( event : Event ) : void
            {
                var column : int = 0
                var row : int  = 0
                var spacing : Number = 1.1
                var numColumns : int = container.sceneWidth / ( IMAGE_SIZE * spacing )
                
                for( var i : int = 0; i < container.numChildren; i++ )
                {
                    var child : DisplayObject = container.getChildAt( i )
                    var position : Point = new Point()

                    var size : Number = IMAGE_SIZE
                    position.x = column * size * spacing + ( IMAGE_SIZE - child.width ) / 2
                    position.y = row * size * spacing + ( IMAGE_SIZE - child.height ) / 2
                    
                    Tweener.addTween( child, { x: position.x,
                                               y: position.y,
                                               time: 0.5,
                                               transition: "easeOutQuad",
                                               delay: Math.random() * 0.1 } )
                    
                    if( ++column >= numColumns )
                    {
                        column = 0
                        row++
                    } 
                }
            }

            private function gridRowsButton_clickHandler( event : Event ) : void
            {
                var column : int = 0
                var row : int  = 0
                var spacing : Number = 1.1
                var numRows : int = container.sceneHeight / ( IMAGE_SIZE * spacing )
                
                for( var i : int = 0; i < container.numChildren; i++ )
                {
                    var child : DisplayObject = container.getChildAt( i )
                    var position : Point = new Point()

                    var size : Number = IMAGE_SIZE
                    position.x = column * size * spacing + ( IMAGE_SIZE - child.width ) / 2
                    position.y = row * size * spacing + ( IMAGE_SIZE - child.height ) / 2
                    
                    Tweener.addTween( child, { x: position.x,
                                               y: position.y,
                                               time: 0.5,
                                               transition: "easeOutQuad",
                                               delay: Math.random() * 0.1 } )
                    
                    if( ++row >= numRows )
                    {
                        row = 0
                        column++
                    } 
                }
            }

        ]]>
    </mx:Script>

    <components:MultiScaleContainer
        id="container"
        top="40" right="0" bottom="0" left="0"
        sceneWidth="10000"
        sceneHeight="10000"
        >
        <components:controllers>
            <controllers:KeyboardController/>
            <controllers:MouseController/>
            <controllers:ContextMenuController/>
        </components:controllers>
        <components:transformer>
            <transformers:TweenerTransformer/>
        </components:transformer>
    </components:MultiScaleContainer>

    <mx:HBox
        horizontalCenter="0"
        top="10"
        >
	    <mx:Button
	        id="shakeItButton"
	        label="Shake it!"
	        click="shakeItButton_clickHandler( event )"
	        />
	    <mx:Button
	        id="circularLayoutButton"
	        label="Circular"
	        click="circularLayoutButton_clickHandler( event )"
	        />
        <mx:Button
            id="gridColumnsButton"
            label="Grid (columns)"
            click="gridColumnsButton_clickHandler( event )"
            />
        <mx:Button
            id="gridRowsButton"
            label="Grid (rows)"
            click="gridRowsButton_clickHandler( event )"
            />
    </mx:HBox>

</mx:Application>